@model MijemApplication.Models.Contact

@{
    ViewBag.Title = "Create";
}
<style>
    .col-md-3 {
        padding-left: 0px;
        padding-right: 0px;
    }
    textarea {
        width: 100%;
    }
    .form-horizontal .form-group {
        margin-left: 0px;
        margin-right: 0px;
    }
</style>
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group contactCreation">
            <div class="col-md-3">
                @Html.EditorFor(model => model.ContactName, new { htmlAttributes = new { @class = "form-control contactNameField", placeholder = "Contact Name ..."} })
                @Html.ValidationMessageFor(model => model.ContactName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.DropDownList("ContactType", null, htmlAttributes: new { @class = "form-control contactTypeField", placeholder = "Contact Type" })
                @Html.ValidationMessageFor(model => model.ContactType, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control phoneNumberField", placeholder = "Phone:    -    -" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control birthdayField", id = "datepicker", placeholder = "Birth Date" } })
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <textarea>
             
        </textarea>
        <div class="form-group">
            <input type="submit" value="SEND" class="btn btn-send" />
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function () {
            $("#datepicker").datepicker();
        });
        tinymce.init({
            selector: "textarea",
            height: 450,
            plugins: [
              "advlist autolink autosave link image lists charmap print preview hr anchor pagebreak",
              "searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking",
              "table contextmenu directionality emoticons template textcolor paste fullpage textcolor colorpicker textpattern"
            ],

            toolbar1: "undo redo | styleselect | bold italic underline | alignleft aligncenter alignright | bullist numlist | link image media emoticons | pagebreak preview",
            menubar: false,
            file_picker_types: 'image',
            // and here's our custom image picker
            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                // Note: In modern browsers input[type="file"] is functional without 
                // even adding it to the DOM, but that might not be the case in some older
                // or quirky browsers like IE, so you might want to add it to the DOM
                // just in case, and visually hide it. And do not forget do remove it
                // once you do not need it anymore.

                input.onchange = function () {
                    var file = this.files[0];

                    var reader = new FileReader();
                    reader.onload = function () {
                        // Note: Now we need to register the blob in TinyMCEs image blob
                        // registry. In the next release this part hopefully won't be
                        // necessary, as we are looking to handle it internally.
                        var id = 'blobid' + (new Date()).getTime();
                        var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                        var base64 = reader.result.split(',')[1];
                        var blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        // call the callback and populate the Title field with the file name
                        cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                };

                input.click();
            }
        });

    </script>
}
